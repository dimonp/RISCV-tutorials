## Инструкция по использованию RISC-V Dev Container

### Предварительные требования

* **Docker** - установите Docker с официального сайта: https://www.docker.com/
* **Visual Studio Code** - установите VS Code с официального сайта: https://code.visualstudio.com/
* **Расширение Remote - Containers** - установите расширение для работы с контейнерами в VS Code

### Подготовка окружения

1. **Клонирование репозитория**
```bash
git clone <ссылка_на_репозиторий>
cd <имя_репозитория>
```

2. **Открытие проекта в VS Code**
* Запустите VS Code
* Откройте папку с проектом через меню `File > Open Folder...`
* Выберите директорию с файлами `Dockerfile`, `devcontainer.json` и `docker-compose.yml`

3. **Подключение к контейнеру**
* В VS Code нажмите на зелёную кнопку "Remote-Containers: Reopen in Container" в панели активности
* Дождитесь завершения сборки контейнера

### Структура проекта

```
.
├── Dockerfile # Конфигурация Docker
├── devcontainer.json # Конфигурация devcontainer
├──.devcontainer
│ └── docker-compose.yml # Конфигурация docker-compose
└── workspace # Рабочая директория
```

### Основные инструменты

* **Компиляторы:**
  * `riscv64-unknown-elf-gcc` - компилятор C
  * `riscv64-unknown-elf-g++` - компилятор C++
  * `riscv64-unknown-elf-as` - ассемблер

* **Отладка:**
  * `riscv64-unknown-elf-gdb` - отладчик
  * QEMU для эмуляции

### Примеры использования

#### Компиляция и запуск

```bash
# Компиляция C программы
riscv64-unknown-elf-gcc main.c -o main

# Компиляция C++ программы
riscv64-unknown-elf-g++ main.cpp -o main

# Компиляция ассемблерного кода
riscv64-unknown-elf-as assembly.s -o assembly.o
```

#### Запуск через QEMU

```bash
# Запуск с отладкой
qemu-riscv64 -semihosting -g 5005 main

# Запуск без отладки
qemu-riscv64 main
```

### Отладка

1. **Запуск отладчика**
```bash
riscv64-unknown-elf-gdb main
```

2. **Настройка в VS Code**
* Откройте файл с исходным кодом
* Установите точки останова
* Запустите отладку через панель `Run and Debug`

### Полезные команды

* **Обновление пакетов:**
```bash
apt-get update
apt-get upgrade
```

* **Просмотр установленных инструментов:**
```bash
which riscv64-unknown-elf-gcc
which qemu-riscv64
```

### Сохранение изменений

Все изменения в рабочей директории `/workspace` сохраняются на хост-машине благодаря монтированию тома.

### Завершение работы

* Закройте VS Code
* При необходимости удалите контейнер через Docker CLI:
```bash
docker-compose down
```

### Известные проблемы

* При первом запуске может потребоваться дополнительное время на сборку контейнера
* Убедитесь, что Docker имеет достаточно ресурсов (памяти и CPU)
* При проблемах с подключением проверьте статус Docker демона

### Дополнительная информация

* Для работы с ассемблером доступны специальные расширения VS Code:
  * Подсветка синтаксиса
  * Снэпшеты кода
  * Инструменты отладки
  * Расширенная поддержка синтаксиса
